// <auto-generated />
using System;
using Gereasy.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Gereasy.Data.Migrations
{
    [DbContext(typeof(GereasyDbContext))]
    [Migration("20210624161853_fixTabelaRelacionamento")]
    partial class fixTabelaRelacionamento
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Gereasy.Models.Clientes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ColaboradoresId")
                        .HasColumnType("int");

                    b.Property<string>("Contacto")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("ColaboradoresId");

                    b.ToTable("Clientes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Contacto = "926926926",
                            Descricao = "Empresa de Suplementos alimentares e produtos cosméticos",
                            Email = "biovip@biovip.pt",
                            Nome = "BioVip"
                        },
                        new
                        {
                            Id = 2,
                            Contacto = "912912912",
                            Descricao = "Empresa produtora de produtos XPTO",
                            Email = "xpto@xpto.pt",
                            Nome = "XPTO"
                        },
                        new
                        {
                            Id = 3,
                            Contacto = "903903903",
                            Descricao = "American Company Makes Everything. Empresa conhecida, em particular, pelo seu patrocínio a Coiote, na sua caça pelo Bip-Bip",
                            Email = "acme@acme.com",
                            Nome = "ACME"
                        });
                });

            modelBuilder.Entity("Gereasy.Models.Colaboradores", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cargo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Contacto")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<DateTime>("DataNasc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Departamento")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Foto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("Colaboradores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cargo = "gestor",
                            Contacto = "9111111111",
                            DataNasc = new DateTime(1990, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Departamento = "Gestão",
                            Email = "PatriciaContente@empresa.com",
                            Foto = "PatriciaContente.jpg",
                            Nome = "Patrícia Contente"
                        },
                        new
                        {
                            Id = 2,
                            Cargo = "gestor",
                            Contacto = "9111111112",
                            DataNasc = new DateTime(1994, 9, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Departamento = "Administração",
                            Email = "BeatrizBonito@empresa.com",
                            Foto = "BeatrizBonito.jpg",
                            Nome = "Beatriz Bonito"
                        },
                        new
                        {
                            Id = 3,
                            Cargo = "gestor",
                            Contacto = "9111111113",
                            DataNasc = new DateTime(1996, 6, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Departamento = "Gestão",
                            Email = "PauloPereira@empresa.com",
                            Foto = "PauloPereira.jpg",
                            Nome = "Paulo Pereira"
                        },
                        new
                        {
                            Id = 4,
                            Cargo = "gestor",
                            Contacto = "9111111114",
                            DataNasc = new DateTime(1995, 1, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Departamento = "Gestão",
                            Email = "VadimsZinatulins@empresa.com",
                            Foto = "VadimsZinatulins.jpg",
                            Nome = "Vadims Zinatulins"
                        },
                        new
                        {
                            Id = 5,
                            Cargo = "tecnico",
                            Contacto = "9111111115",
                            DataNasc = new DateTime(1996, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Departamento = "Informática",
                            Email = "ZeMaria@empresa.com",
                            Foto = "ZeMaria.jpg",
                            Nome = "Zé Maria"
                        },
                        new
                        {
                            Id = 6,
                            Cargo = "tecnico",
                            Contacto = "9111111116",
                            DataNasc = new DateTime(1996, 12, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Departamento = "Informática",
                            Email = "Marisa Vieira@empresa.com",
                            Foto = "MarisaVieira.jpg",
                            Nome = "Marisa Vieira"
                        },
                        new
                        {
                            Id = 7,
                            Cargo = "tecnico",
                            Contacto = "9111111117",
                            DataNasc = new DateTime(1992, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Departamento = "Informática",
                            Email = "PaulaSilva@empresa.com",
                            Foto = "PaulaSilva.jpg",
                            Nome = "Paula Silva"
                        },
                        new
                        {
                            Id = 8,
                            Cargo = "tecnico",
                            Contacto = "9111111118",
                            DataNasc = new DateTime(1993, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Departamento = "Informática",
                            Email = "MarcoRocha@empresa.com",
                            Foto = "MarcoRocha.jpg",
                            Nome = "Marco Rocha"
                        });
                });

            modelBuilder.Entity("Gereasy.Models.Projetos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClienteFK")
                        .HasColumnType("int");

                    b.Property<int>("CriadorFK")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataFim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataPrevista")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteFK");

                    b.HasIndex("CriadorFK");

                    b.ToTable("Projetos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClienteFK = 1,
                            CriadorFK = 1,
                            DataCriacao = new DateTime(2021, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataFim = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInicio = new DateTime(2022, 6, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataPrevista = new DateTime(2022, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Realização de um WebSite aberto ao público para divulgação e venda dos seus produtos.",
                            Nome = "WebSite Comercial"
                        },
                        new
                        {
                            Id = 2,
                            ClienteFK = 1,
                            CriadorFK = 2,
                            DataCriacao = new DateTime(2021, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataFim = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInicio = new DateTime(2022, 6, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataPrevista = new DateTime(2022, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Realização de uma aplicação para Android e IOS para divuldagação e venda dos produtos do cliente.",
                            Nome = "App mobile Comercial"
                        },
                        new
                        {
                            Id = 3,
                            ClienteFK = 2,
                            CriadorFK = 3,
                            DataCriacao = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataFim = new DateTime(2020, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInicio = new DateTime(2020, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataPrevista = new DateTime(2020, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Realização de um Jogo para Android para promoção dos produtos XPTO do cliente.",
                            Nome = "Jogo Mobile"
                        },
                        new
                        {
                            Id = 4,
                            ClienteFK = 2,
                            CriadorFK = 2,
                            DataCriacao = new DateTime(2020, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataFim = new DateTime(2021, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInicio = new DateTime(2020, 2, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataPrevista = new DateTime(2020, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Realização de um WebSite para venda de produtos para todo o mundo.",
                            Nome = "XPTOshop"
                        },
                        new
                        {
                            Id = 5,
                            ClienteFK = 1,
                            CriadorFK = 4,
                            DataCriacao = new DateTime(2021, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataFim = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataInicio = new DateTime(2022, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataPrevista = new DateTime(2022, 7, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Realização de um programa para gerir sistema de rega.",
                            Nome = "Programa De Gestão de Rega"
                        });
                });

            modelBuilder.Entity("Gereasy.Models.Tarefas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ColaboradorFK")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataLimite")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prioridade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjetoFK")
                        .HasColumnType("int");

                    b.Property<long>("TempoDedicadoTotal")
                        .HasColumnType("bigint");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ColaboradorFK");

                    b.HasIndex("ProjetoFK");

                    b.ToTable("Tarefas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ColaboradorFK = 1,
                            DataCriacao = new DateTime(2021, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataLimite = new DateTime(2022, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Criar um front-end para apresentar ao cliente",
                            Estado = "Pendente",
                            Prioridade = "baixa",
                            ProjetoFK = 1,
                            TempoDedicadoTotal = 1152000000000L,
                            Titulo = "Front-end"
                        },
                        new
                        {
                            Id = 2,
                            ColaboradorFK = 1,
                            DataCriacao = new DateTime(2021, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataLimite = new DateTime(2022, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Concretizar o modelo acordado com o cliente",
                            Estado = "Pendente",
                            Prioridade = "baixa",
                            ProjetoFK = 1,
                            TempoDedicadoTotal = 1152000000000L,
                            Titulo = "Base de Dados"
                        },
                        new
                        {
                            Id = 3,
                            ColaboradorFK = 1,
                            DataCriacao = new DateTime(2021, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataLimite = new DateTime(2021, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Preparar testes unitários para as funções desenvolvidas em back-end",
                            Estado = "Pendente",
                            Prioridade = "media",
                            ProjetoFK = 1,
                            TempoDedicadoTotal = 1152000000000L,
                            Titulo = "Testes Unitários"
                        },
                        new
                        {
                            Id = 4,
                            ColaboradorFK = 2,
                            DataCriacao = new DateTime(2021, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataLimite = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Desenvolver a api para ser consumida por ambas as apps mobile",
                            Estado = "Pendente",
                            Prioridade = "media",
                            ProjetoFK = 2,
                            TempoDedicadoTotal = 1152000000000L,
                            Titulo = "API"
                        },
                        new
                        {
                            Id = 5,
                            ColaboradorFK = 2,
                            DataCriacao = new DateTime(2021, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataLimite = new DateTime(2022, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Desenvolver a aplicação para dispositivos Android",
                            Estado = "Pendente",
                            Prioridade = "baixa",
                            ProjetoFK = 2,
                            TempoDedicadoTotal = 1152000000000L,
                            Titulo = "App Android"
                        },
                        new
                        {
                            Id = 6,
                            ColaboradorFK = 2,
                            DataCriacao = new DateTime(2021, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataLimite = new DateTime(2022, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Desenvolver a aplicação para dispositivos IOS",
                            Estado = "Pendente",
                            Prioridade = "baixa",
                            ProjetoFK = 2,
                            TempoDedicadoTotal = 1152000000000L,
                            Titulo = "App IOS"
                        },
                        new
                        {
                            Id = 7,
                            ColaboradorFK = 3,
                            DataCriacao = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataLimite = new DateTime(2020, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Criar uma banda sonora para o jogo",
                            Estado = "concluido",
                            Prioridade = "alta",
                            ProjetoFK = 3,
                            TempoDedicadoTotal = 1152000000000L,
                            Titulo = "Banda Sonora"
                        },
                        new
                        {
                            Id = 8,
                            ColaboradorFK = 3,
                            DataCriacao = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataLimite = new DateTime(2020, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Desenvolver os assets necessários para os personagens",
                            Estado = "concluido",
                            Prioridade = "media",
                            ProjetoFK = 3,
                            TempoDedicadoTotal = 1152000000000L,
                            Titulo = "Art Assets"
                        },
                        new
                        {
                            Id = 9,
                            ColaboradorFK = 3,
                            DataCriacao = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataLimite = new DateTime(2020, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Melhorar mecanismos relacionados com a jogabilidade",
                            Estado = "concluido",
                            Prioridade = "baixa",
                            ProjetoFK = 3,
                            TempoDedicadoTotal = 1152000000000L,
                            Titulo = "Jogabilidade"
                        },
                        new
                        {
                            Id = 10,
                            ColaboradorFK = 3,
                            DataCriacao = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataLimite = new DateTime(2020, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Alterar último capítulo",
                            Estado = "concluido",
                            Prioridade = "baixa",
                            ProjetoFK = 3,
                            TempoDedicadoTotal = 1152000000000L,
                            Titulo = "História"
                        },
                        new
                        {
                            Id = 11,
                            ColaboradorFK = 2,
                            DataCriacao = new DateTime(2020, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataLimite = new DateTime(2020, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Concretizar a base de dados",
                            Estado = "concluido",
                            Prioridade = "alta",
                            ProjetoFK = 4,
                            TempoDedicadoTotal = 1152000000000L,
                            Titulo = "BD"
                        },
                        new
                        {
                            Id = 12,
                            ColaboradorFK = 2,
                            DataCriacao = new DateTime(2020, 4, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataLimite = new DateTime(2020, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Elaborar um mock-up do front-end para apresentar ao cliente",
                            Estado = "concluido",
                            Prioridade = "alta",
                            ProjetoFK = 4,
                            TempoDedicadoTotal = 1152000000000L,
                            Titulo = "Front-end"
                        },
                        new
                        {
                            Id = 13,
                            ColaboradorFK = 4,
                            DataCriacao = new DateTime(2021, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataLimite = new DateTime(2022, 7, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Encontrar uma API que permite obter previsões do tempo",
                            Estado = "Pendente",
                            Prioridade = "baixa",
                            ProjetoFK = 5,
                            TempoDedicadoTotal = 1152000000000L,
                            Titulo = "Api com previsão de tempo"
                        },
                        new
                        {
                            Id = 14,
                            ColaboradorFK = 4,
                            DataCriacao = new DateTime(2021, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataLimite = new DateTime(2022, 7, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Testar o funcionamento dos regadores adquiridos",
                            Estado = "Pendente",
                            Prioridade = "baixa",
                            ProjetoFK = 5,
                            TempoDedicadoTotal = 1152000000000L,
                            Titulo = "Testar regadores IOT"
                        });
                });

            modelBuilder.Entity("Gereasy.Models.TarefasColaboradores", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ColaboradorFK")
                        .HasColumnType("int");

                    b.Property<string>("Funcao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TarefaFK")
                        .HasColumnType("int");

                    b.Property<long>("TempoDedicado")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ColaboradorFK");

                    b.HasIndex("TarefaFK");

                    b.ToTable("TarefasColaboradores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ColaboradorFK = 5,
                            Funcao = "implementador",
                            TarefaFK = 1,
                            TempoDedicado = 1152000000000L
                        },
                        new
                        {
                            Id = 2,
                            ColaboradorFK = 1,
                            Funcao = "revisor",
                            TarefaFK = 1,
                            TempoDedicado = 0L
                        },
                        new
                        {
                            Id = 3,
                            ColaboradorFK = 5,
                            Funcao = "implementador",
                            TarefaFK = 2,
                            TempoDedicado = 1152000000000L
                        },
                        new
                        {
                            Id = 4,
                            ColaboradorFK = 6,
                            Funcao = "revisor",
                            TarefaFK = 2,
                            TempoDedicado = 0L
                        },
                        new
                        {
                            Id = 5,
                            ColaboradorFK = 5,
                            Funcao = "implementador",
                            TarefaFK = 3,
                            TempoDedicado = 864000000000L
                        },
                        new
                        {
                            Id = 6,
                            ColaboradorFK = 6,
                            Funcao = "implementador",
                            TarefaFK = 3,
                            TempoDedicado = 288000000000L
                        },
                        new
                        {
                            Id = 7,
                            ColaboradorFK = 1,
                            Funcao = "revisor",
                            TarefaFK = 3,
                            TempoDedicado = 0L
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Gereasy.Models.Clientes", b =>
                {
                    b.HasOne("Gereasy.Models.Colaboradores", null)
                        .WithMany("ListaDeClientes")
                        .HasForeignKey("ColaboradoresId");
                });

            modelBuilder.Entity("Gereasy.Models.Projetos", b =>
                {
                    b.HasOne("Gereasy.Models.Clientes", "Cliente")
                        .WithMany("ListaDeProjetos")
                        .HasForeignKey("ClienteFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gereasy.Models.Colaboradores", "Criador")
                        .WithMany("ListaDeProjetosCriados")
                        .HasForeignKey("CriadorFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Criador");
                });

            modelBuilder.Entity("Gereasy.Models.Tarefas", b =>
                {
                    b.HasOne("Gereasy.Models.Colaboradores", "Colaborador")
                        .WithMany("ListaDeTarefasCriadas")
                        .HasForeignKey("ColaboradorFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gereasy.Models.Projetos", "Projeto")
                        .WithMany("ListaDeTarefas")
                        .HasForeignKey("ProjetoFK");

                    b.Navigation("Colaborador");

                    b.Navigation("Projeto");
                });

            modelBuilder.Entity("Gereasy.Models.TarefasColaboradores", b =>
                {
                    b.HasOne("Gereasy.Models.Colaboradores", "Colaborador")
                        .WithMany("ListaDeTarefasAtribuidas")
                        .HasForeignKey("ColaboradorFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gereasy.Models.Tarefas", "Tarefa")
                        .WithMany("ListaDeColaboradoresAtribuidos")
                        .HasForeignKey("TarefaFK");

                    b.Navigation("Colaborador");

                    b.Navigation("Tarefa");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gereasy.Models.Clientes", b =>
                {
                    b.Navigation("ListaDeProjetos");
                });

            modelBuilder.Entity("Gereasy.Models.Colaboradores", b =>
                {
                    b.Navigation("ListaDeClientes");

                    b.Navigation("ListaDeProjetosCriados");

                    b.Navigation("ListaDeTarefasAtribuidas");

                    b.Navigation("ListaDeTarefasCriadas");
                });

            modelBuilder.Entity("Gereasy.Models.Projetos", b =>
                {
                    b.Navigation("ListaDeTarefas");
                });

            modelBuilder.Entity("Gereasy.Models.Tarefas", b =>
                {
                    b.Navigation("ListaDeColaboradoresAtribuidos");
                });
#pragma warning restore 612, 618
        }
    }
}
